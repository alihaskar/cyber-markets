/* Gradle plugins part */
buildscript {
    ext {
        kotlinVersion = "1.1.51"
        kotlinCoroutinesVersion = "0.18"
        jacksonVersion = "2.8.9"
        okhttpVersion = "3.8.1"
        undertowVersion = "1.4.18.Final"
        kafkaVersion = "1.0.0"
        web3jVersion = "2.3.1"
        khttpVersion = "0.1.0"
        rocksDbVersion = "5.8.6"

        // plugins
        dependencyPluginVersion = "1.0.3.RELEASE"
        shadowPluginVersion = "2.0.1"

        // tests
        junitVersion = "5.0.1"
        junitPlatformVersion = "1.0.1"
        mockitoVersion = "2.1.0"
        mockitoKotlinVersion = "0.7.0"

        // logs
        slf4jVersion = "1.7.25"
        lockbackVersion = "1.2.3"
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("io.spring.gradle:dependency-management-plugin:$dependencyPluginVersion")
        classpath("org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion")
        classpath("com.github.jengelman.gradle.plugins:shadow:$shadowPluginVersion")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
    distributionType = Wrapper.DistributionType.ALL
}


subprojects {
/* Gradle plugins settings part */
    apply plugin: "kotlin"
    apply plugin: "org.junit.platform.gradle.plugin"
    apply plugin: "io.spring.dependency-management"

    kotlin {
        experimental {
            coroutines "enable"
        }
    }

/* Java dependencies part */
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencyManagement {
        dependencies {
            dependency("org.slf4j:slf4j-api:$slf4jVersion")
            dependency("ch.qos.logback:logback-classic:$lockbackVersion")

            dependency("org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion")
            dependency("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
            dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinCoroutinesVersion")

            dependency("com.squareup.okhttp3:okhttp:$okhttpVersion")
            dependency("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
            dependency("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")

            dependency("io.undertow:undertow-core:$undertowVersion")

            dependency("org.apache.kafka:kafka-clients:$kafkaVersion")

            dependency("org.junit.jupiter:junit-jupiter-api:$junitVersion")
            dependency("org.junit.platform:junit-platform-launcher:$junitPlatformVersion")
            dependency("org.mockito:mockito-core:$mockitoVersion")
            dependency("com.nhaarman:mockito-kotlin:$mockitoKotlinVersion")
            dependency("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
            dependency("org.apache.kafka:kafka-streams:$kafkaVersion")
            dependency("org.rocksdb:rocksdbjni:$rocksDbVersion")
        }
    }

    dependencies {
        testCompile("org.junit.jupiter:junit-jupiter-api")
        testCompile("org.junit.platform:junit-platform-launcher")
        testCompile("org.mockito:mockito-core")
        testCompile("com.nhaarman:mockito-kotlin")
        testRuntime("org.junit.jupiter:junit-jupiter-engine")
    }
}

project(":connectors-core") {
    apply plugin: "application"

    dependencies {
        compile(project(":core"))
        compile("khttp:khttp:$khttpVersion")
    }

    run {
        systemProperties System.getProperties()
    }
}

project(":connectors-bitfinex") {
    apply plugin: "application"

    dependencies {
        compile(project(":connectors-core"))
    }

    mainClassName = "fund.cyber.markets.connectors.bitfinex.BitfinexConnectorApplicationKt"

    run {
        systemProperties System.getProperties()
    }
}

project(":connectors-bitstamp") {
    apply plugin: "application"

    dependencies {
        compile(project(":connectors-core"))
    }

    mainClassName = "fund.cyber.markets.connectors.bitstamp.BitstampConnectorApplicationKt"

    run {
        systemProperties System.getProperties()
    }
}

project(":connectors-hitbtc") {
    apply plugin: "application"

    dependencies {
        compile(project(":connectors-core"))
    }

    mainClassName = "fund.cyber.markets.connectors.hitbtc.HitBtcConnectorApplicationKt"

    run {
        systemProperties System.getProperties()
    }
}

project(":connectors-poloniex") {
    apply plugin: "application"

    dependencies {
        compile(project(":connectors-core"))
    }

    mainClassName = "fund.cyber.markets.connectors.poloniex.PoloniexConnectorApplicationKt"

    run {
        systemProperties System.getProperties()
    }
}

project(":connectors-gdax") {
    apply plugin: "application"

    dependencies {
        compile(project(":connectors-core"))
    }

    mainClassName = "fund.cyber.markets.connectors.gdax.GdaxConnectorApplicationKt"

    run {
        systemProperties System.getProperties()
    }
}

project(":connectors-bittrex") {
    apply plugin: "application"

    dependencies {
        compile(project(":connectors-core"))
    }

    mainClassName = "fund.cyber.markets.connectors.binance.BinanceConnectorApplicationKt"

    run {
        systemProperties System.getProperties()
    }
}

project(":core") {
    dependencies {
        compile("org.slf4j:slf4j-api")
        compile("ch.qos.logback:logback-classic")

        compile("org.jetbrains.kotlin:kotlin-stdlib-jre8")
        compile("org.jetbrains.kotlin:kotlin-reflect")
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8")

        compile("io.undertow:undertow-core")

        compile("com.squareup.okhttp3:okhttp")
        compile("com.fasterxml.jackson.core:jackson-databind")
        compile("com.fasterxml.jackson.module:jackson-module-kotlin")

        compile("org.apache.kafka:kafka-clients")
        compile("org.apache.kafka:kafka-streams") {
            exclude group: 'org.rocksdb', module: 'rocksdbjni'
        }
    }
}

project(":stream-api") {
    apply plugin: "application"

    dependencies {
        compile(project(":core"))
        compile(project(":tickers"))
        compile("io.undertow:undertow-core")
    }

    mainClassName = "fund.cyber.markets.StreamApiApplication"
}

project(":tickers") {
    apply plugin: "application"

    dependencies {
        compile(project(":core"))
        compile("org.rocksdb:rocksdbjni")
    }

    mainClassName = "fund.cyber.markets.tickers.TickersApplicationKt"
}